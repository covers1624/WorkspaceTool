plugins {
    id 'maven-publish'
    id 'com.gradleup.shadow' version '8.3.8'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
        vendor = JvmVendorSpec.ADOPTIUM
    }
}

archivesBaseName = 'wt-wrapper'

dependencies {
    implementation 'com.google.code.gson:gson:2.8.9'
    implementation 'org.slf4j:slf4j-simple:1.7.32'
    implementation libs.quack
    implementation(libs.jdkutils) {
        // This is transitive and completely unused, just more crap in the jar.
        exclude(group: 'commons-codec', module: 'commons-codec')
    }
    implementation libs.bcpg

    implementation libs.mavenartifact
    implementation libs.mavenmetadata
}

shadowJar {
    configurations = [project.configurations.runtimeClasspath]

    from sourceSets.main.output

    exclude 'META-INF/maven/**'
    exclude 'META-INF/plexus/**'
    exclude 'META-INF/sisu/**'
    exclude 'META-INF/services/java.security.Provider'
    exclude 'org/bouncycastle/pqc/**'
    exclude 'module-info.class'
    exclude '**/Log4j2Plugins.dat'
    exclude '**/package.html'
    exclude 'about.html'
    exclude 'LICENSE.txt'
}

tasks.register("shrink", proguard.gradle.ProGuardTask) {
    dependsOn shadowJar
    ext {
        inputJar = shadowJar.archiveFile.get().asFile
        outputDir = file("${buildDir}/proguard")
        outputJar = file("${outputDir}/wt-wrapper.jar")
        config = 'proguard.pro'
    }
    inputs.file inputJar
    inputs.file config

    outputDir.mkdirs()

    injars inputJar
    outjars outputJar

    def javaHome = System.getProperty('java.home')
    if (System.getProperty('java.version').startsWith('1.')) {
        libraryjars "${javaHome}/lib/rt.jar"
    } else {
        libraryjars "${javaHome}/jmods/java.base.jmod", jarfilter: '!**.jar', filter: '!module-info.class'
        libraryjars "${javaHome}/jmods/java.sql.jmod", jarfilter: '!**.jar', filter: '!module-info.class'
    }

    configuration config
    doLast {
        logger.lifecycle("PG Shrunk to: ${(int) (outputJar.length() / 1024)}kb from: ${(int) (inputJar.length() / 1024)}kb")
    }
}

jar.enabled = false
def realJar = tasks.register('realJar', Jar) {
    dependsOn shrink
    from zipTree(shrink.outputJar)
    manifest {
        attributes 'Main-Class': "net.covers1624.wstool.wrapper.Main"
        attributes 'Specification-Title': 'WorkspaceTool-Wrapper'
        attributes 'Specification-Vendor': 'covers1624'
        attributes 'Specification-Version': '1'
        attributes 'Implementation-Title': 'WorkspaceTool-Wrapper'
        attributes 'Implementation-Vendor': 'covers1624'
        attributes 'Implementation-Version': version
        attributes 'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    }
    from 'LICENSE.txt'
}
assemble.dependsOn realJar

publishing {
    publications {
        publication(MavenPublication) {
            artifactId archivesBaseName

            artifact realJar
        }
    }
}

repositories {
    mavenCentral()
}
