plugins {
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
}

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

archivesBaseName = 'wt-wrapper'

dependencies {
    implementation 'com.google.code.gson:gson:2.8.8'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'org.apache.commons:commons-compress:1.21'
    implementation 'org.slf4j:slf4j-simple:1.7.32'
    implementation 'org.ow2.asm:asm:9.2'
    implementation 'net.covers1624:Quack:0.4.0.31'

    implementation 'org.apache.maven.resolver:maven-resolver-api:1.7.2'
    implementation 'org.apache.maven.resolver:maven-resolver-spi:1.7.2'
    implementation 'org.apache.maven.resolver:maven-resolver-impl:1.7.2'
    implementation 'org.apache.maven.resolver:maven-resolver-util:1.7.2'
    implementation 'org.apache.maven.resolver:maven-resolver-connector-basic:1.7.2'
    implementation 'org.apache.maven.resolver:maven-resolver-transport-http:1.7.2'
    implementation 'org.apache.maven.resolver:maven-resolver-transport-file:1.7.2'
    implementation 'org.apache.maven:maven-model-builder:3.8.1'
    implementation 'org.apache.maven:maven-resolver-provider:3.8.1'

    implementation('net.rubygrapefruit:native-platform:0.21') {
        transitive = false
    }
    implementation('net.rubygrapefruit:native-platform-windows-amd64:0.21') {
        transitive = false
    }
    implementation('net.rubygrapefruit:native-platform-windows-i386:0.21') {
        transitive = false
    }

    implementation 'org.jetbrains:annotations:22.0.0'
    implementation 'com.google.code.findbugs:jsr305:3.0.2'
}

shadowJar {
    configurations = [project.configurations.runtimeClasspath]

    from sourceSets.main.output

    exclude 'META-INF/maven/**'
    exclude 'META-INF/plexus/**'
    exclude 'META-INF/sisu/**'
    exclude 'module-info.class'
    exclude '**/Log4j2Plugins.dat'
    exclude '**/package.html'
    exclude 'about.html'
    exclude 'LICENSE.txt'
}

task shrink(type: proguard.gradle.ProGuardTask, dependsOn: shadowJar) {
    ext {
        inputJar = shadowJar.archiveFile.get().asFile
        outputDir = file("${buildDir}/proguard")
        outputJar = file("${outputDir}/wt-wrapper.jar")
        config = 'proguard.pro'
    }
    inputs.file inputJar
    inputs.file config

    outputDir.mkdirs()

    injars inputJar
    outjars outputJar

    def javaHome = System.getProperty('java.home')
    if (System.getProperty('java.version').startsWith('1.')) {
        libraryjars "${javaHome}/lib/rt.jar"
    } else {
        libraryjars "${javaHome}/jmods/java.base.jmod", jarfilter: '!**.jar', filter: '!module-info.class'
        libraryjars "${javaHome}/jmods/java.desktop.jmod", jarfilter: '!**.jar', filter: '!module-info.class'
        libraryjars "${javaHome}/jmods/java.logging.jmod", jarfilter: '!**.jar', filter: '!module-info.class'
        libraryjars "${javaHome}/jmods/jdk.unsupported.jmod", jarfilter: '!**.jar', filter: '!module-info.class'
    }

    configuration config
    doLast {
        logger.lifecycle("PG Shrunk to: ${outputJar.length() / 1024}kb from: ${inputJar.length() / 1024}kb")
    }
}

jar.enabled = false
task realJar(type: Jar) {
    dependsOn shrink
    from zipTree(shrink.outputJar)
    manifest {
        attributes 'Main-Class': "net.covers1624.wt.wrapper.Main"
    }
    from 'LICENSE.txt'
}
assemble.dependsOn realJar

publishing {
    publications {
        publication(MavenPublication) {
            artifactId archivesBaseName

            artifact realJar
        }
    }
}
