import groovy.json.JsonOutput
import org.jetbrains.gradle.ext.ActionDelegationConfig.TestRunner

import java.nio.file.Files

buildscript {
    repositories() {
        mavenLocal()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath 'com.guardsquare:proguard-gradle:7.1.0'
    }
}

plugins {
    id "org.jetbrains.gradle.plugin.idea-ext" version "1.0.1"
}

group 'net.covers1624.WorkspaceTool'
version '0.5.0'

version = "$version." + (System.getenv("BUILD_NUMBER") ?: "1")
println "Starting build of WorkspaceTool, Version: ${version}"

def repos = {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven { url 'https://maven.covers1624.net/' }
    maven { url 'https://files.minecraftforge.net/maven/' }
    maven { url 'https://repo.gradle.org/gradle/libs-releases-local/' }
}

subprojects { subProject ->
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'

    group rootProject.group
    version rootProject.version

    repositories {
        with repos
    }

    publishing {
        repositories {
            if (System.getenv('MAVEN_PASS')) {
                maven {
                    url "https://nexus.covers1624.net/repository/maven-releases/"
                    credentials {
                        username 'covers1624'
                        password System.getenv('MAVEN_PASS')
                    }
                }
            }
        }

        publications {
            publication(MavenPublication) {
                pom {
                    name = 'WorkspaceTool'
                    description = 'WorkspaceTool, A Minecraft Modding workspace tool.'
                    url = 'https://github.com/covers1624/WorkspaceTool'

                    scm {
                        url = 'https://github.com/covers1624/WorkspaceTool'
                        connection = 'scm:git:git://github.com/covers1624/WorkspaceTool.git'
                        connection = 'scm:git:git@github.com:covers1624/WorkspaceTool.git'
                    }

                    issueManagement {
                        system = 'github'
                        url = 'https://github.com/covers1624/WorkspaceTool/issues'
                    }
                    licenses {
                        license {
                            name = "MIT"
                            url = 'https://raw.githubusercontent.com/covers1624/WorkspaceTool/master/LICENSE.txt'
                            distribution = 'repo'
                        }
                    }
                    developers {
                        developer {
                            id = 'covers1624'
                            name = 'covers1624'
                        }
                    }
                }
            }
        }
    }
}

repositories {
    with repos
}

configurations {
    packing
    gradlePluginPath
}

dependencies {
    packing project(':core')
    gradlePluginPath project(':gradle-extract')
}

tasks.register('genVersionManifest') {
    ext {
        output = file("build/libs/manifest-${version}.json")
    }
    inputs.property('packing', configurations.packing)
    outputs.file output

    doLast {
        def dependencies = []
        def gradlePluginDependencies = []
        def manifest = [
                'main_class'              : 'net.covers1624.wt.WorkspaceTool',
                'java_version'            : 'JAVA_16',
                'dependencies'            : dependencies,
                'gradlePluginDependencies': gradlePluginDependencies
        ]
        long totalSize
        configurations.packing.resolvedConfiguration.resolvedArtifacts.each {
            def len = it.file.length()
            totalSize += len
            dependencies.add([
                    "artifact": toCoords(it),
                    "sha256"  : Files.readAllBytes(it.file.toPath()).sha256(),
                    "size"    : len
            ])
        }
        configurations.gradlePluginPath.resolvedConfiguration.resolvedArtifacts.each {
            def len = it.file.length()
            totalSize += len
            dependencies.add([
                    "artifact": toCoords(it),
                    "sha256"  : Files.readAllBytes(it.file.toPath()).sha256(),
                    "size"    : len
            ])
            gradlePluginDependencies << toCoords(it)
        }
        def json = JsonOutput.prettyPrint(JsonOutput.toJson(manifest))
        Files.write(output.toPath(), json.getBytes("UTF-8"))
//        logger.lifecycle("Total Size: ${(int) (totalSize / 1024)}kb")
    }
}

tasks.register('genGradlePluginMetaDev') {
    ext {
        output = file("build/libs/gradle_plugin_data.json")
    }
    inputs.property('gradlePluginPath', configurations.gradlePluginPath)
    outputs.file output

    def dependencies = []
    configurations.gradlePluginPath.resolvedConfiguration.resolvedArtifacts.each {
        if (it.id.componentIdentifier instanceof ProjectComponentIdentifier) {
            dependencies << project(it.id.componentIdentifier.projectPath).projectDir.absolutePath
        } else {
            dependencies << it.file.absolutePath
        }
    }
    def json = JsonOutput.prettyPrint(JsonOutput.toJson(dependencies))
    Files.write(output.toPath(), json.getBytes("UTF-8"))
}

task clean {
    doLast {
        delete(tasks.genVersionManifest.output)
    }
}

idea.project.settings {
    delegateActions {
        delegateBuildRunToGradle = false
        testRunner = TestRunner.PLATFORM
    }
}

def toCoords(ResolvedArtifact artifact) {
    def id = artifact.moduleVersion.id
    def classifier = artifact.classifier ? ":" + artifact.classifier : ""
    return "${id.group}:${artifact.name}:${id.version}${classifier}"
}
