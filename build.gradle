import groovy.xml.MarkupBuilder
import net.covers1624.gradlestuff.dependencies.ConfigurationVisitor
import net.covers1624.gradlestuff.dependencies.ConfigurationWalker
import net.covers1624.gradlestuff.dependencies.DependencyName
import org.apache.commons.lang3.StringUtils

buildscript {
    repositories() {
        mavenLocal()
        jcenter()
        mavenCentral()
        maven { url 'https://maven.covers1624.net/' }
    }
    dependencies {
        classpath 'net.covers1624:GradleStuff:2.0.0+'
    }
}

plugins {
    id 'java'
    id 'groovy'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
}

//Converts source set output's to proper Dependencies in a configuration.
apply plugin: 'net.covers1624.ss-dependencies'

group 'net.covers1624.workspace_tool'
version '0.3.2'

version = "$version." + (System.getenv("BUILD_NUMBER") ?: "1")
println "Starting build of ${archivesBaseName}, Version: ${version}"

sourceCompatibility = 1.8

sourceSets {
    common
    forge
    create('gradle')
    intellij
    main
    minecraft
    create('wrapper')
}

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    maven { url 'https://maven.covers1624.net/' }
    maven { url 'https://files.minecraftforge.net/maven/' }
    maven { url 'https://repo.gradle.org/gradle/libs-releases-local/' }
}

configurations {
    common
    mavenResolver
    forgeCompile.extendsFrom common
    gradleCompile.extendsFrom common
    intellijCompile.extendsFrom common
    compile.extendsFrom common
    commonCompile.extendsFrom common
    compile.extendsFrom mavenResolver
    wrapperCompile.extendsFrom mavenResolver
    minecraftCompile.extendsFrom common

    runtimeClasspath.extendsFrom commonRuntimeClasspath
    runtimeClasspath.extendsFrom forgeRuntimeClasspath
    runtimeClasspath.extendsFrom gradleRuntimeClasspath
    runtimeClasspath.extendsFrom intellijRuntimeClasspath
    runtimeClasspath.extendsFrom minecraftRuntimeClasspath
}

dependencies {

    //Common
    common 'org.ow2.asm:asm:9.1'
    common 'org.ow2.asm:asm-commons:9.1'
    common 'org.apache.logging.log4j:log4j-core:2.11.1'
    common 'org.apache.logging.log4j:log4j-slf4j-impl:2.11.1'
    common 'org.apache.logging.log4j:log4j-jul:2.11.1'
    common 'com.google.code.gson:gson:2.8.5'
    common 'com.google.guava:guava:26.0-jre'
    common 'org.codehaus.groovy:groovy-all:3.0.0-beta-3'
    common 'org.apache.commons:commons-text:1.6'
    common 'org.apache.commons:commons-lang3:3.9'
    common 'org.apache.maven:maven-artifact:3.6.0'
    common 'it.unimi.dsi:fastutil:7.1.0'
    common 'org.eclipse.jgit:org.eclipse.jgit:5.2.1.201812262042-r'
    common 'net.rubygrapefruit:native-platform:0.18'
    common 'org.fusesource.jansi:jansi:1.18'
    common 'org.jline:jline-terminal-jna:3.12.1'
    common 'org.apache.httpcomponents:httpclient:4.5.7'
    common 'commons-io:commons-io:2.6'
    common 'com.electronwill.night-config:core:3.6.0'
    common 'com.electronwill.night-config:toml:3.6.0'
    common 'com.opencsv:opencsv:5.0'
    common "org.tukaani:xz:1.8"
    common "org.apache.commons:commons-compress:1.8.1"
    common 'org.apache.commons:commons-collections4:4.3'
    common 'codechicken:ChickenASM:2.0.0.+'
    common 'net.covers1624:TailConsole:1.1.0.4'
    common 'net.covers1624:Quack:0.2.0.9'
    commonCompileOnly 'org.jetbrains:annotations:16.0.2'

    //mavenResolver
    mavenResolver 'org.apache.maven.resolver:maven-resolver-api:1.3.3'
    mavenResolver 'org.apache.maven.resolver:maven-resolver-spi:1.3.3'
    mavenResolver 'org.apache.maven.resolver:maven-resolver-impl:1.3.3'
    mavenResolver 'org.apache.maven.resolver:maven-resolver-util:1.3.3'
    mavenResolver 'org.apache.maven.resolver:maven-resolver-connector-basic:1.3.3'
    mavenResolver 'org.apache.maven.resolver:maven-resolver-transport-http:1.3.3'
    mavenResolver 'org.apache.maven.resolver:maven-resolver-transport-file:1.3.3'
    mavenResolver 'org.apache.maven:maven-model-builder:3.6.0'
    mavenResolver 'org.apache.maven:maven-resolver-provider:3.6.0'

    //Forge
    forgeCompile 'net.minecraftforge:srgutils:0.4.3'
    forgeCompile sourceSets.minecraft.output
    forgeCompileOnly sourceSets.common.output
    forgeCompileOnly sourceSets.main.output
    forgeCompileOnly sourceSets.gradle.output
    forgeCompileOnly gradleApi()
    forgeCompileOnly 'org.jetbrains:annotations:16.0.2'

    //Gradle
    gradleCompile "net.covers1624:GradleStuff:2.1.0.+"
    gradleCompileOnly gradleApi()
    gradleCompileOnly sourceSets.common.output
    gradleCompileOnly "net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT"
    gradleCompileOnly 'org.jetbrains:annotations:16.0.2'

    //Intellij
    intellijCompileOnly sourceSets.common.output
    intellijCompileOnly sourceSets.main.output

    //Main
    compile 'org.gradle:gradle-tooling-api:4.10.3'
    compile 'org.apache.logging.log4j:log4j-slf4j-impl:2.11.1'
    compile 'org.apache.logging.log4j:log4j-jul:2.11.1'
    compile sourceSets.common.output
    runtimeOnly sourceSets.forge.output
    runtimeOnly sourceSets.intellij.output
    runtimeOnly sourceSets.gradle.output
    runtimeOnly sourceSets.minecraft.output
    runtimeOnly 'net.covers1624:GradleStuff:2.1.0.+'
    compileOnly 'org.jetbrains:annotations:16.0.2'
    compileOnly sourceSets.wrapper.output
    annotationProcessor 'org.apache.logging.log4j:log4j-core:2.11.1'

    //Minecraft
    minecraftCompileOnly sourceSets.common.output

    testCompile 'junit:junit:4.12'
    testCompile 'com.github.stefanbirkner:system-rules:1.19.0'
    testCompile 'org.apache.logging.log4j:log4j-core:2.11.1:tests'

    //Wrapper
    wrapperCompile 'com.google.code.gson:gson:2.8.5'
    wrapperCompile 'org.apache.commons:commons-lang3:3.9'
    wrapperCompile 'org.slf4j:slf4j-simple:1.7.25'
    wrapperCompileOnly 'org.jetbrains:annotations:16.0.2'

    testImplementation sourceSets.intellij.output

}

jar {
    baseName 'wt-core'
    from sourceSets.main.output
}

task commonJar(type: Jar) {
    baseName 'wt-common'
    dependsOn compileCommonJava, compileCommonGroovy
    from sourceSets.common.output
}

task forgeJar(type: Jar) {
    baseName 'wt-forge'
    dependsOn compileForgeJava, compileForgeGroovy
    from sourceSets.forge.output
}

task gradleJar(type: Jar) {
    baseName 'wt-gradle'
    dependsOn compileGradleJava, compileGradleGroovy
    from sourceSets.gradle.output
}

task intellijJar(type: Jar) {
    baseName 'wt-intellij'
    dependsOn compileIntellijJava, compileIntellijGroovy
    from sourceSets.intellij.output
}

task minecraftJar(type: Jar) {
    baseName 'wt-minecraft'
    dependsOn compileMinecraftJava, compileMinecraftGroovy
    from sourceSets.minecraft.output
}

task wrapperJar(type: com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
    baseName 'wt-wrapper'

    minimize()
    configurations = [project.configurations.wrapperCompile]

    from sourceSets.wrapper.output
    manifest {
        attributes 'Main-Class': "net.covers1624.wt.wrapper.Main"
    }

    exclude 'META-INF/maven/**'
    exclude 'META-INF/plexus/**'
    exclude 'META-INF/sisu/**'
    exclude 'module-info.class'

    relocate 'com.google', 'net.covers1624.repack.com.google'
    relocate 'javax.inject', 'net.covers1624.repack.javax.inject'
    relocate 'org.apache', 'net.covers1624.repack.org.apache'
    relocate 'org.codehaus', 'net.covers1624.repack.org.codehaus'
    relocate 'org.eclipse', 'net.covers1624.repack.org.eclipse'
    relocate 'org.slf4j', 'net.covers1624.repack.org.slf4j'
    relocate 'joptsimple', 'net.covers1624.repack.joptsimple'
}

build.dependsOn(commonJar, forgeJar, gradleJar, intellijJar, minecraftJar, wrapperJar)

publishing {
    repositories {
        if (System.getenv('MAVEN_PASS')) {
            maven {
                url "https://nexus.covers1624.net/repository/maven-releases/"
                credentials {
                    username 'covers1624'
                    password System.getenv('MAVEN_PASS')
                }
            }
        }
    }
    publications {
        'wt-core'(MavenPublication) {
            groupId = project.group
            artifactId = 'wt-core'
            version = project.version
            artifact jar
            addDependencies(pom, sourceSets.main)
        }
        'wt-common'(MavenPublication) {
            groupId = project.group
            artifactId = 'wt-common'
            version = project.version
            artifact commonJar
            addDependencies(pom, sourceSets.common)
        }
        'wt-forge'(MavenPublication) {
            groupId = project.group
            artifactId = 'wt-forge'
            version = project.version
            artifact forgeJar
            addDependencies(pom, sourceSets.forge)
        }
        'wt-gradle'(MavenPublication) {
            groupId = project.group
            artifactId = 'wt-gradle'
            version = project.version
            artifact gradleJar
            addDependencies(pom, sourceSets.gradle)
        }
        'wt-intellij'(MavenPublication) {
            groupId = project.group
            artifactId = 'wt-intellij'
            version = project.version
            artifact intellijJar
            addDependencies(pom, sourceSets.intellij)
        }
        'wt-wrapper'(MavenPublication) {
            groupId = project.group
            artifactId = 'wt-wrapper'
            version = project.version
            artifact wrapperJar
            addDependencies(pom, sourceSets.wrapper)
        }
        'wt-minecraft'(MavenPublication) {
            groupId = project.group
            artifactId = 'wt-minecraft'
            version = project.version
            artifact minecraftJar
            addDependencies(pom, sourceSets.minecraft)
        }
    }
}

def addDependencies(pom, SourceSet ss) {
    pom.withXml {
        def walker = new ConfigurationWalker(dependencies)
        def dependencies = it.asNode().appendNode('dependencies')
        def visitor = new Visitor(dependencies, project)
        def compileConfig = configurations.findByName(ss.compileConfigurationName)
        def implementationConfig = configurations.findByName(ss.implementationConfigurationName)
        def runtimeConfig = configurations.findByName(ss.runtimeConfigurationName)
        def runtimeOnlyConfig = configurations.findByName(ss.runtimeOnlyConfigurationName)
        def compileOnlyConfig = configurations.findByName(ss.compileOnlyConfigurationName)
        visitor.scope = 'compile'
        walker.walkTree([compileConfig, implementationConfig], visitor, false, false, true)
        visitor.scope = 'runtime'
        walker.walkTree([runtimeConfig, runtimeOnlyConfig], visitor, false, false, true)
        visitor.scope = 'provided'
        walker.walkTree([compileOnlyConfig], visitor, false, false, true)
    }
}

def markupPom(XmlProvider provider, Closure closure) {
    def node = markupXml(closure)
    provider.asNode().append(node)
}

def markupXml(Closure closure) {
    def xml = new StringWriter()
    def b = new MarkupBuilder(xml)
    Closure copy = closure.clone()
    copy.setResolveStrategy(Closure.DELEGATE_FIRST)
    copy.setDelegate(b)
    if (copy.getMaximumNumberOfParameters() == 0) {
        copy.call()
    } else {
        copy.call(b)
    }
    return new XmlParser().parseText(xml.toString())
}

class Visitor implements ConfigurationVisitor {

    final Project project
    final Node dependencies
    String scope

    Visitor(dependencies, project) {
        this.dependencies = dependencies
        this.project = project
    }

    @Override
    void visitModuleDependency(DependencyName name, File classes, File sources, File javadoc) {
        def dep = dependencies.appendNode('dependency')
        dep.appendNode('groupId', name.group)
        dep.appendNode('artifactId', name.module)
        dep.appendNode('version', name.version)
        dep.appendNode('scope', scope)
        if (StringUtils.isNotEmpty(name.classifier)) {
            dep.appendNode('classifier', name.classifier)
        }
        if (!StringUtils.equals(name.extension, 'jar')) {
            dep.appendNode('type', name.extension)
        }
    }

    @Override
    void visitSourceSetDependency(SourceSet ss) {
        this.visitModuleDependency(new DependencyName(project.group, "wt-${ss.name}", project.version, null, 'jar'), null, null, null)
    }

    //@formatter:off
    @Override void startVisit(Configuration configuration) {}
    @Override void endVisit() {}
    //@formatter:on
}
