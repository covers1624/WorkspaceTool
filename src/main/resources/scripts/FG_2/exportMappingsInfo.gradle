/*
 * Copyright (c) 2018-2019 covers1624
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 */

import groovy.json.JsonOutput
import groovy.json.JsonSlurper

rootProject {
    task exportMappingsInfo {
        if (!project.hasProperty("export_out")) {
            throw new GradleException("Property 'export_out' must be specified.")
        }
        doLast {
            def outFile = file(project.export_out)
            def genSrgs = project.tasks.getByName("genSrgs")
            def info = new MappingsInfo()

            def configMappings = configurations.getByName("forgeGradleMcpMappings")
            def configMcpData = configurations.getByName("forgeGradleMcpData")

            def mappingsArtifact = configMappings.dependencies.find()
            def mcpDataArtifact = configMcpData.dependencies.find()

            info.mappingsArtifact = "${mappingsArtifact.group}:${mappingsArtifact.name}:${mappingsArtifact.version}"
            info.mcpDataArtifact = "${mcpDataArtifact.group}:${mcpDataArtifact.name}:${mcpDataArtifact.version}"

            info.mappings = configMappings.resolvedConfiguration.files.find()
            info.data = configMcpData.resolvedConfiguration.files.find()

            info.mergedJar = tasks.getByName("mergeJars").getOutJar()

            info.notchToSrg = genSrgs.getNotchToSrg().getAbsolutePath()
            info.notchToMcp = genSrgs.getNotchToMcp().getAbsolutePath()
            info.mcpToNotch = genSrgs.getMcpToNotch().getAbsolutePath()
            info.srgToMcp = genSrgs.getSrgToMcp().getAbsolutePath()
            info.mcpToSrg = genSrgs.getMcpToSrg().getAbsolutePath()
            def jsonStr = JsonOutput.toJson(info)
            def jsonMap = new JsonSlurper().parseText(jsonStr)
            cleanGarbage(jsonMap)
            outFile.write(JsonOutput.prettyPrint(JsonOutput.toJson(jsonMap)))
        }
    }

    afterEvaluate {
        if (!project.plugins.hasPlugin("net.minecraftforge.gradle.forge")
                //Compat for running on Forge.
                && !project.plugins.hasPlugin("net.minecraftforge.gradle.patcher")) {
            throw new GradleException("Forge plugin not present.")
        }
        tasks.findByName("exportMappingsInfo").dependsOn("genSrgs", "mergeJars")
    }
}

class MappingsInfo {

    String mappingsArtifact
    String mcpDataArtifact

    String mappings
    String data

    String mergedJar

    String notchToSrg
    String notchToMcp
    String mcpToNotch
    String srgToMcp
    String mcpToSrg
}


//Removes some garbage.
def cleanGarbage(Object obj) {
    def theGarbage = ["contentHash", "originalClassName"].toSet()
    if (obj instanceof Map) {
        def itr = obj.keySet().iterator()
        while (itr.hasNext()) {
            if (theGarbage.contains(itr.next())) {
                itr.remove()
            }
        }
        for (Object value : obj.values()) {
            cleanGarbage(value)
        }
    } else if (obj instanceof List) {
        for (Object v : obj) {
            cleanGarbage(v)
        }
    }
}
